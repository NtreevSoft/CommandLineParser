<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgSeperatorAndSwitchDelimiterCannotBeTheSame" xml:space="preserve">
    <value>ArgSeperator는 SwitchDelimiter과 다른 문자여야 합니다.</value>
  </data>
  <data name="ArgSeperatorMustBeAPunctuation" xml:space="preserve">
    <value>ArgSeperator는 문장부호여야만 합니다.</value>
  </data>
  <data name="AvaliableCommands" xml:space="preserve">
    <value>사용 가능한 명령들</value>
  </data>
  <data name="CannotConvertFromString" xml:space="preserve">
    <value>타입컨버터에서 문자열에 의한 변환이 지원되질 않습니다.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>설명</value>
  </data>
  <data name="InvalidArgumentType" xml:space="preserve">
    <value>잘못된 인수 형식입니다.</value>
  </data>
  <data name="InvalidSwitchName" xml:space="preserve">
    <value>스위치의 이름은 문자 또는 숫자여야만 합니다.</value>
  </data>
  <data name="InvalidSwitchWasIncluded" xml:space="preserve">
    <value>유효하지 않은 스위치가 포함되어 있습니다.</value>
  </data>
  <data name="License" xml:space="preserve">
    <value>the MIT License http://www.opensource.org/licenses/mit-license.php.</value>
  </data>
  <data name="MustBeStaticClass" xml:space="preserve">
    <value>타입이 정적 클래스이여야만 합니다.</value>
  </data>
  <data name="MutuallyExclusiveException" xml:space="preserve">
    <value>MutuallyExclusive가 같은 스위치는 Required 속성값이 모두 true거나 false여야 합니다.</value>
  </data>
  <data name="MutuallyExclusiveSwitchIsAlreadySet" xml:space="preserve">
    <value>같은 값의 상호배타적 스위치가 이미 설정되었습니다.</value>
  </data>
  <data name="NoArguments" xml:space="preserve">
    <value>전달인자가 한개도 포함되어 있지 않습니다.</value>
  </data>
  <data name="NotFoundMatchedSwitch" xml:space="preserve">
    <value>해당 스위치를 찾을 수가 없거나 잘못된 인자 형식입니다.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>선택 인수</value>
  </data>
  <data name="Requirements" xml:space="preserve">
    <value>필수 인수</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>요약</value>
  </data>
  <data name="SwitchDelimiterMustBePunctuation" xml:space="preserve">
    <value>SwitchDelimiter 는 문장부호여야만 합니다.</value>
  </data>
  <data name="SwitchIsMissing" xml:space="preserve">
    <value>필요한 스위치가 빠져있습니다.</value>
  </data>
  <data name="SwitchWasAlreadyRegistered" xml:space="preserve">
    <value>스위치가 이미 등록되어 있습니다. 중복여부를 확인하세요.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>사용 방법</value>
  </data>
</root>